[;; Locations
 {:db/id #db/id[:db.part/db]
  :db/ident       :location/latitude
  :db/valueType   :db.type/float
  :db/cardinality :db.cardinality/one
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident       :location/longitude
  :db/valueType   :db.type/float
  :db/cardinality :db.cardinality/one
  :db.install/_attribute :db.part/db}
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 ;; Users
 {:db/id #db/id[:db.part/db]
  :db/ident       :user/id
  :db/unique      :db.unique/value
  :db/valueType   :db.type/uuid
  :db/cardinality :db.cardinality/one
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident       :user/name
  :db/unique      :db.unique/value
  :db/valueType   :db.type/string
  :db/cardinality :db.cardinality/one
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident       :user/password
  :db/valueType   :db.type/string
  :db/cardinality :db.cardinality/one
  :db/noHistory   true
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident       :user/location
  :db/valueType   :db.type/ref
  :db/cardinality :db.cardinality/one
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident       :user/radius
  :db/valueType   :db.type/float
  :db/cardinality :db.cardinality/one
  :db.install/_attribute :db.part/db}

 ;; Register can be a db fn that returns a new user
 ;; Login can be a db fn that returns a login event entity
 {:db/id #db/id[:db.part/db]
  :db/ident       :user/register
  :db/fn
  #db/fn {:lang "clojure"
          :requires [crypto.password.scrypt :as pw]
          :params [db username password]
          :code (let [hash-pass (pw/encrypt password)
                      user      (d/q '[:find ?e
                                       :in $ ?username
                                       :where [?e :user/name ?username]]
                                     db
                                     username)]
                  (if (empty? user)
                    [{:db/id (d/tempid :db.part/user)
                      :user/id (d/squuid)
                      :user/name username
                      :user/password hash-pass}]))}
  }

 {:db/id #db/id[:db.part/db]
  :db/ident :user/login
  :db/fn
  #db/fn {:lang "clojure"
          :requires [crypto.password.scrypt :as pw]
          :params [db username password]
          :code (let [user (d/entity
                            db (ffirst (d/q '[:find ?e
                                              :in $ ?username
                                              :where
                                              [?e :user/name ?username]]
                                            db username)))]
                  (if-let [cur-pass (:user/password user)]
                    (pw/check password cur-pass)
                    false))}
  }

; {:db/id #db/id[:db.part/db]
;  :db/ident       :user/out-fn
;  :db/fn          #db/fn {:lang "clojure"
;                          :params [db e]
;                          :code _}
;  :db.install/_attribute :db.part/db}
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 ;; Posts
 {:db/id #db/id[:db.part/db]
  :db/ident       :post/id
  :db/unique      :db.unique/value
  :db/valueType   :db.type/uuid
  :db/cardinality :db.cardinality/one
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident       :post/user
  :db/valueType   :db.type/ref
  :db/cardinality :db.cardinality/one
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident       :post/contents
  :db/valueType   :db.type/string
  :db/cardinality :db.cardinality/one
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident       :post/time
  :db/valueType   :db.type/instant
  :db/cardinality :db.cardinality/one
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident       :post/location
  :db/valueType   :db.type/ref
  :db/cardinality :db.cardinality/one
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident       :post/submit
  :db/fn
  #db/fn {:lang "clojure"
          :params [db user contents]
          :code (let [id (d/squuid)
                      post {:db/id (d/tempid :db.part/user)
                            :post/id id
                            :post/user (:db/id user) 
                            :post/contents contents
                            :post/time (d/squuid-time-millis id)
                            :post/location (:user/location user)}]
                  post)}
  }
 
; {:db/id #db/id[:db.part/db]
;  :db/ident       :post/out-fn
;  :db/fn          #db/fn {:lang "clojure"
;                          :params [db e]
;                          :code _}
;  }
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 ;; Votes
 {:db/id #db/id[:db.part/db]
  :db/ident       :vote/id
  :db/unique      :db.unique/value
  :db/valueType   :db.type/uuid
  :db/cardinality :db.cardinality/one
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident       :vote/post
  :db/valueType   :db.type/ref
  :db/cardinality :db.cardinality/one
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident       :vote/user
  :db/valueType   :db.type/ref
  :db/cardinality :db.cardinality/one
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident       :vote/time
  :db/valueType   :db.type/instant
  :db/cardinality :db.cardinality/one
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident       :vote/location
  :db/valueType   :db.type/ref
  :db/cardinality :db.cardinality/one
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident       :vote/submit
  :db/fn
  #db/fn {:lang "clojure"
          :params [db user post]
          :code (let [id (d/squuid)
                      vote {:db/id (d/tempid :db.part/user)
                            :vote/id id
                            :vote/post (:db/id post)
                            :vote/user (:db/id user)
                            :vote/time (d/squuid-time-millis id)
                            :vote/location (:user/location user)}]
                  vote)}
  }
 
; {:db/id #db/id[:db.part/db]
;  :db/ident       :comment/out-fn
;  :db/fn          #db/fn {:lang "clojure"
;                          :params [db e]
;                          :code _}
;  :db.install/_attribute :db.part/db}
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 ;; Comments
 {:db/id #db/id[:db.part/db]
  :db/ident       :comment/id
  :db/unique      :db.unique/value
  :db/valueType   :db.type/uuid
  :db/cardinality :db.cardinality/one
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident       :comment/post
  :db/valueType   :db.type/ref
  :db/cardinality :db.cardinality/one
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident       :comment/user
  :db/valueType   :db.type/ref
  :db/cardinality :db.cardinality/one
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident       :comment/contents
  :db/valueType   :db.type/string
  :db/cardinality :db.cardinality/one
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident       :comment/time
  :db/valueType   :db.type/instant
  :db/cardinality :db.cardinality/one
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident       :comment/location
  :db/valueType   :db.type/ref
  :db/cardinality :db.cardinality/one
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident       :comment/submit
  :db/fn
  #db/fn {:lang "clojure"
          :params [db user post contents]
          :code (let [id (d/squuid)
                      cmt {:db/id (d/tempid :db.part/user)
                           :comment/id id
                           :comment/post (:db/id post)
                           :comment/user (:db/id user)
                           :comment/contents contents
                           :comment/time (d/squuid-time-millis id)
                           :comment/location (:user/location user)}]
                  cmt)}
  }
 
; {:db/id #db/id[:db.part/db]
;  :db/ident       :comment/out-fn
;  :db/fn          #db/fn {:lang "clojure"
;                          :params [db e]
;                          :code _}
;  :db.install/_attribute :db.part/db}
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 ]
